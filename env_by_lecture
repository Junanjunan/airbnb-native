** 핸드폰에서 Expo가 저절로 꺼지는 오류 발생시
    오타가 생겼을 때 오타 수정해주니 해결되었음 (alignItems: "Center" 를 "center" 로 바르게 고쳤더니 해결됨)

# 6.1 Setup

    설치, 셋팅 완료 후 앱실행
        (airbnb-native)
            $ npm start

        로그인 안되어있으면 해야한다. (LOGGED IN AS ~ 라고 떠야 함) 로그인해야 핸드폰에서 application 확인 가능
            로그인 방법: $ expo login
            미리 만들어둔 expo 아이디(email or username 나는 wnsghksk@gmail.com or taltalrealty)로 로그인
            그러면 컴퓨터와 핸드폰이 연동된다.


# 6.2 Preloading Images
    
    * 전체적인 설명은 docs.expo.io 에서 가져옴

    AppLoading
        - (nicco왈) 내가 항상 사용하는 첫번째 component이다.
        - 화면 뒤에서 실제 앱에 필요한 사항들을 로딩할 수 있다. 그 후에 application을 실행

    (App.js) 기본
        import { StatusBar } from 'expo-status-bar';
        import React from 'react';
        import { StyleSheet, Text, View } from 'react-native';

        export default function App() {
        return (
            <View style={styles.container}>
            <Text>Welcome to Airbnb</Text>
            <StatusBar style="auto" />
            </View>
        );
        }

        const styles = StyleSheet.create({
        container: {
            flex: 1,
            backgroundColor: '#fff',
            alignItems: 'center',
            justifyContent: 'center',
        },
        });

    (App.js) 변경
        import { StatusBar } from 'expo-status-bar';
        import React from 'react';
        import { AppLoading } from "expo";

        export default function App() {
        return <AppLoading />;
        }

        -> 오류 발생: 댓글 확인
            AppLoading 이 expo 에서 분리되서 expo-app-loading 에 있나보네요.
            expo install expo-app-loading 해서 설치하시고
            import AppLoading from 'expo-app-loading' 해야 하네요.
                    

    이미지 불러오기
    (App.js)
        import { StatusBar } from 'expo-status-bar';
        import React, { useState } from 'react';
        import { Asset } from 'expo-asset';
        import AppLoading from 'expo-app-loading';
        import { Text, Image } from 'react-native';

        const cacheImages = images => images.map(image =>{
        if(typeof image === "string"){
            return Image.prefetch(image);
        } else {                          # 이렇게 폴더에 있는 이미지를 가져오는 경우를 위해서 npm add expo-asset
            return Asset.fromModule(image).downloadAsync();
        }
        });

        export default function App() {
        const [isReady, setIsReady] = useState(false);
        const handleFinish = () => setIsReady(true);
        const loadAssets = async () => {
            const images = [
            require("./assets/loginBg.jpg"),
        "https://www.google.com/url?sa=i&url=https%3A%2F%2Febenezersuites.com%2Fhome%2Fairbnb-logo%2F&psig=AOvVaw1nvmxtozHJBe-U0j7iYZey&ust=1626415945104000&source=images&cd=vfe&ved=0CAoQjRxqFwoTCND24de15PECFQAAAAAdAAAAABAI"
        ];
        console.log(cacheImages(images));
        }
        return isReady ? (<Text>I'm ready</Text>) : (
        <AppLoading 
        onError={console.error} 
        onFinish={handleFinish} 
        startAsync={loadAssets} />
        );
        }

    이렇게하고 실행하면, 아래와 같은 console.log 출력

        Array [
        Promise {
            "_U": 0,
            "_V": 0,
            "_W": null,
            "_X": null,
        },
        Promise {
            "_U": 0,
            "_V": 0,
            "_W": null,
            "_X": null,
        },
        ]


# 6.3 Preloading Fonts

    expo의 vector-icons를 이용할 것임
    설치: $ npm add @expo/vector-icons

    font 패지지도 필요
    설치: $ expo install expo-font

    (App.js)
        import { StatusBar } from 'expo-status-bar';
        import React, { useState } from 'react';
        import { Asset } from 'expo-asset';
        import * as Font from 'expo-font';
        import AppLoading from 'expo-app-loading';
        import { Ionicons } from '@expo/vector-icons';
        import { Text, Image } from 'react-native';

        const cacheImages = images => images.map(image =>{
        if(typeof image === "string"){
            return Image.prefetch(image);
        } else {                          
            return Asset.fromModule(image).downloadAsync();
        }
        });

        const cacheFonts = fonts => fonts.map(font => Font.loadAsync(font))

        export default function App() {
        const [isReady, setIsReady] = useState(false);
        const handleFinish = () => setIsReady(true);
        const loadAssets = async () => {
            const images = [
            require("./assets/loginBg.jpg"),
        "https://www.google.com/url?sa=i&url=https%3A%2F%2Febenezersuites.com%2Fhome%2Fairbnb-logo%2F&psig=AOvVaw1nvmxtozHJBe-U0j7iYZey&ust=1626415945104000&source=images&cd=vfe&ved=0CAoQjRxqFwoTCND24de15PECFQAAAAAdAAAAABAI"
        ];
        const fonts = [Ionicons.font]
        const imagePromises = cacheImages(images);                  # array 임
        const fontPromises = cacheFonts(fonts);                     # array 임
        console.log(cacheFonts(fonts));
        return Promise.all([...fontPromises, ...imagePromises])     # ... : 3개의 점을 찍으면 배열(array) 안의 내용물을 가져온다는 것
        }
        return isReady ? (<Text>I'm ready</Text>) : (
        <AppLoading 
        onError={console.error} 
        onFinish={handleFinish} 
        startAsync={loadAssets} />
        );
        }


## 7 REDUX SETUP

# 7.0 usersSlice
    (Gate.js)
        import React from "react";

        export default () => {
            const isLoggedIn = False;
            return (<View>{isLoggedIn? <TexT>Welcome</TexT> : <Text>Login Please</Text>}</View>);
        }


    (App.js)
        import { StatusBar } from 'expo-status-bar';
        import React, { useState } from 'react';
        import { Asset } from 'expo-asset';
        import * as Font from 'expo-font';
        import AppLoading from 'expo-app-loading';
        import { Ionicons } from '@expo/vector-icons';
        import { Text, Image } from 'react-native';
        import Gate from "./components/Gate";

        const cacheImages = images => images.map(image =>{
        if(typeof image === "string"){
            return Image.prefetch(image);
        } else {                          
            return Asset.fromModule(image).downloadAsync();
        }
        });

        const cacheFonts = fonts => fonts.map(font => Font.loadAsync(font))

        export default function App() {
        const [isReady, setIsReady] = useState(false);
        const handleFinish = () => setIsReady(true);
        const loadAssets = async () => {
            const images = [
            require("./assets/loginBg.jpg"),
        "https://www.google.com/url?sa=i&url=https%3A%2F%2Febenezersuites.com%2Fhome%2Fairbnb-logo%2F&psig=AOvVaw1nvmxtozHJBe-U0j7iYZey&ust=1626415945104000&source=images&cd=vfe&ved=0CAoQjRxqFwoTCND24de15PECFQAAAAAdAAAAABAI"
        ];
        const fonts = [Ionicons.font]
        const imagePromises = cacheImages(images);
        const fontPromises = cacheFonts(fonts);
        return Promise.all([...fontPromises, ...imagePromises])
        }
        return isReady ? (
            <Gate />
        ) : (
            <AppLoading 
            onError={console.error} 
            onFinish={handleFinish} 
            startAsync={loadAssets} 
            />
        );
        }

    여기까지 하고 보면, 정 중앙에 Login Please 뜰 것임


    * 이제 Redux toolkit을 설치하자
        $ npm install @reduxjs/toolkit
    * Redux 설치
        $ npm add redux
    * ?
        $ npm add react-redux

    설치가 모두 끝나면 Redux 시작
    redux 폴더를 만들고 그 안에 store.js, usersSlice.js, rootReducer.js 만들자 (usersSlice.js - 우리의 첫 reducer?)

    (redux/usersSlice.js)
        import { createSlice } from "@reduxjs/toolkit"


        const usersSlice = createSlice({
            name: "users",
            initialState: {
                isLoggedIn: false,
                token: null             # 처음 상태에서 token: null -> token을 만든 이유는 token을 state에 저장하기 위해서다
            },
            reducers: {
                logIn(state, action){
                    state.isLoggedIn = true;
                    state.token = action.payload.token;
                },
                logOut(state, action){
                    state.isLoggedIn = false;
                    state.token = null;
                }
            }
        })

        export const {logIn, logOut} = usersSlice.actions;
        export default usersSlice.reducer;

    (redux/rootReducer.js)
        import { combineReducers } from "redux";
        import usersReducer from "./usersSlice";

        export default combineReducers({
            usersReducer
        })


7.1 login and logOut

    rootReducer.js에서 모든 reducer들을 결합할 것이다

    (redux/store.js)
        import {configureStore} from "@reduxjs/toolkit";
        import rootReducer from "./rootReducer";

        const store = configureStore({
            reducer: rootReducer
        });

        export default store;
    
    이제 store는 만들었으니 App.js에 연결해보자

    (App.js)
        import { StatusBar } from 'expo-status-bar';
        import React, { useState } from 'react';
        import { Asset } from 'expo-asset';
        import * as Font from 'expo-font';
        import AppLoading from 'expo-app-loading';
        import { Ionicons } from '@expo/vector-icons';
        import { Text, Image } from 'react-native';
        import Gate from "./components/Gate";
        import store from "./redux/store";

        const cacheImages = images => images.map(image =>{
        if(typeof image === "string"){
            return Image.prefetch(image);
        } else {                          
            return Asset.fromModule(image).downloadAsync();
        }
        });

        const cacheFonts = fonts => fonts.map(font => Font.loadAsync(font))

        export default function App() {
        const [isReady, setIsReady] = useState(false);
        const handleFinish = () => setIsReady(true);
        const loadAssets = async () => {
            const images = [
            require("./assets/loginBg.jpg"),
        "https://www.google.com/url?sa=i&url=https%3A%2F%2Febenezersuites.com%2Fhome%2Fairbnb-logo%2F&psig=AOvVaw1nvmxtozHJBe-U0j7iYZey&ust=1626415945104000&source=images&cd=vfe&ved=0CAoQjRxqFwoTCND24de15PECFQAAAAAdAAAAABAI"
        ];
        const fonts = [Ionicons.font]
        const imagePromises = cacheImages(images);
        const fontPromises = cacheFonts(fonts);
        return Promise.all([...fontPromises, ...imagePromises])
        }
        return isReady ? (
            <Provider store={store}>                    # react-redux에서 Provider를 가져와야 하고, Provider는 store에 접근할 수 있어야 한다.
            <Gate />
            </Provider>
        ) : (
            <AppLoading 
            onError={console.error} 
            onFinish={handleFinish} 
            startAsync={loadAssets} 
            />
        );
        }

    여기까지 하고 새로고침하면, 아무 에러 발생하지 않아야 한다.

    Gate component에 isLoggedIn이 false로 정의되어 있다.
    이제 2가지 옵션이 있다. 첫번째 옵션은 일반적인 Redux 방식으로 하는 것이다. - mapStateToProps를 사용

    (Gate.js)
        import React from "react";
        import { View, Text } from "react-native";

        export default () => {
            const isLoggedIn = false;
            return (
            <View style={{justifyContent: "center", alignItems: "center", flex: 1}}>
                {isLoggedIn? <Text>Welcome</Text> : <Text>Login Please</Text>}
                </View>
            );
        };
    
    이렇게 되어있던 것을 아래와 같이 변경

        import React from "react";
        import { View, Text } from "react-native";
        import { connect } from "react-redux";

        const Gate = props => {
            console.log(props);
            const isLoggedIn = false;
            return (
            <View style={{justifyContent: "center", alignItems: "center", flex: 1}}>
                {isLoggedIn? <Text>Welcome</Text> : <Text>Login Please</Text>}
            </View>
            );
        };

        const mapStateToProps = (state) => {
            console.log(state);
            return {isLoggedIn: false}
        }

        export default connect(mapStateToProps)(Gate)

    이렇게 해주고 Expo를 보면, 다음과 같이 출력

        Object {
        "usersReducer": Object {
            "isLoggedIn": false,
            "token": null,
        },
        }

        -> mapStateToProps 의 console.log(state)가 출력된 것임
        -> usersSlice.js 에 있는 것과 같음을 확인 가능

    * hooks를 사용해서 코드를 줄일 수 있다. : useSelector 라는 hook을 사용해보자
    
    (Gate.js)
        import React from "react";
        import { View, Text } from "react-native";
        import { connect, useSelector } from "react-redux";

        export default () => {
            const usersSlice = useSelector(state => state.usersReducer);
            console.log(usersSlice);
            return (
            <View style={{justifyContent: "center", alignItems: "center", flex: 1}}>
                {false? <Text>Welcome</Text> : <Text>Login Please</Text>}
            </View>
            );
        };

    selector는 state에 접근하게 해주고, state를 보내기도 한다.
    userSelector는 state의 전부가 아닌 일부만 가져올 수 있기 때문에 유용하다.

    위와 같이 하면 아래와 같이 출력 됨
        Object {
        "isLoggedIn": false,
        "token": null,
        }

    usersSlice안에 isLoggedIn을 이용해서 다음과 같이 해도 됨

    (Gate.js)
        import React from "react";
        import { View, Text } from "react-native";
        import { connect, useSelector } from "react-redux";

        export default () => {
            const { isLoggedIn } = useSelector(state => state.usersReducer);
            return (
            <View style={{justifyContent: "center", alignItems: "center", flex: 1}}>
                {isLoggedIn? <Text>Welcome</Text> : <Text>Login Please</Text>}
            </View>
            );
        };

    이를 이용해서, usersSlice.js 의 isLoggedIn 값을 변경해서 화면을 변경해줄 수 있다. 다음과 같이

    (redux/usersSlice.js)
        import { createSlice } from "@reduxjs/toolkit"


        const usersSlice = createSlice({
            name: "users",
            initialState: {
                isLoggedIn: true,
                token: null
            },
            reducers: {
                logIn(state, action){
                    state.isLoggedIn = true;
                    state.token = action.payload.token;
                },
                logOut(state, action){
                    state.isLoggedIn = false;
                    state.token = null;
                }
            }
        })

        export const {logIn, logOut} = usersSlice.actions;
        export default usersSlice.reducer;

    TouchableOpacity, onPress를 이용할 건데
    dispatch에 접근할 수 있어야 한다. dispatch를 가져올건데,
    connect를 사용해서 mapDispatchToProps 로 가져올 수 있다.
    또는 hook을 사용할 수 도 있다. (useDispatch)

    (Gate.js)
        import React from "react";
        import { View, Text, TouchableOpacity } from "react-native";
        import { useDispatch, useSelector } from "react-redux";
        import { logIn, logOut } from "../redux/usersSlice";


        export default () => {
            const { isLoggedIn } = useSelector(state => state.usersReducer);
            const dispatch = useDispatch();
            return (
            <View style={{justifyContent: "center", alignItems: "center", flex: 1}}>
                {isLoggedIn? (
                    <TouchableOpacity onPress={() => dispatch(logOut())}>
                        <Text>Log Out</Text>
                    </TouchableOpacity>) : (
                    <TouchableOpacity onPress={() => dispatch(logIn())}>
                        <Text>Log In</Text>
                    </TouchableOpacity>
                    )}
            </View>
            );
        };

    위와 같이 해주고 화면을 클릭해주면, 오류가 발생
    (redux/usersSlice.js)를 보면
        import { createSlice } from "@reduxjs/toolkit"


        const userSlice = createSlice({
            name: "users",
            initialState: {
                isLoggedIn: false,
                token: null
            },
            reducers: {
                logIn(state, action){
                    state.isLoggedIn = false;
                    state.token = action.payload.token;     # 로그인할 때 토큰을 줘야 한다. -> Gate.js에서 token을 하나 만들어보자
                },
                logOut(state, action){
                    state.isLoggedIn = false;
                    state.token = null;
                }
            }
        })

        export const {logIn, logOut} = userSlice.actions;
        export default userSlice.reducer;


    (Gate.js)
        import React from "react";
        import { View, Text, TouchableOpacity } from "react-native";
        import { useDispatch, useSelector } from "react-redux";
        import { logIn, logOut } from "../redux/usersSlice";


        export default () => {
            const { isLoggedIn } = useSelector(state => state.usersReducer);
            const dispatch = useDispatch();
            return (
                <View style={{justifyContent: "center", alignItems: "center", flex: 1}}>
                    {isLoggedIn? (
                        <TouchableOpacity onPress={() => dispatch(logOut())}>
                            <Text>Log Out</Text>
                        </TouchableOpacity>
                        ) : (
                        <TouchableOpacity onPress={() => dispatch(logIn("bs.token"))}>
                            <Text>Log In</Text>
                        </TouchableOpacity>
                        )}
                </View>
            );
        };

    이렇게 해줬더니 오류는 안뜨는데, 화면 전환이 안된다.. 강의에서는 되는데... 
    (redux/usersSlice.js)를 다음과 같이 해주었더니 전환됨
        import { createSlice } from "@reduxjs/toolkit"


        const userSlice = createSlice({
            name: "users",
            initialState: {
                isLoggedIn: false,
                token: null
            },
            reducers: {
                logIn(state, action){
                    state.isLoggedIn = true;
                    state.token = action.payload.token;
                },
                logOut(state, action){
                    state.isLoggedIn = false;
                    state.token = null;
                }
            }
        })

export const {logIn, logOut} = userSlice.actions;
export default userSlice.reducer;


# 7.2 redux-persist part One
    * 모바일에서 login 이 계속 유지되는 것을 해보도록 하자.
    Redux Persist는 redux에서 뭔가를 바꿀때마다 state를 저장해준다. redux에서 뭔가 바뀐것들이 핸드폰에 저장된다.

    $ npm install redux-persist

    configureStore 설정을 바꿔야 함

    (redux/store.js)
        import { configureStore } from "@reduxjs/toolkit";
        import { persistStore, persistReducer } from "redux-persist";
        import rootReducer from "./rootReducer";

        const persistConfig = {
            key:'root',                        # 여기에 state를 어디에 저장하고 싶은지 Redux Persist 설정을 추가하면 된다. 우선 공식문서와 똑같이 작성
            storage: AsyncStorage
        }

        const persistedReducer = persistReducer(persistConfig, rootReducer)     # rootReducer 자리: persist 하려는 reducer, persist는 save를 의미 -> Redux Persist에게 rootReducer에 변화가 있을 때마다 매번 저장하라고 하는 것임

        const store = configureStore({
            reducer: rootReducer
        });

        export default store;

    이제 configureStore의 reducer를 바꿔보자
    rootReducer가 이제 필요 없고 persistedReducer가 와야 한다.
    persistedReducer로 Redux store를 설정(configure)하는 것이다.

    (redux/store.js)
        import { configureStore } from "@reduxjs/toolkit";
        import { persistStore, persistReducer } from "redux-persist";
        import rootReducer from "./rootReducer";
        import { AsyncStorage } from "react-native";                    

        const persistConfig = {
            key: "root",                      
            storage: AsyncStorage
        }

        const persistedReducer = persistReducer(persistConfig, rootReducer)     

        const store = configureStore({
            reducer: persistedReducer
        });

        export default store;

        여기까지 했을때 오류는 없어야 한다.
        # AsyncStore가 없는 걸로 나오면 (줄이 그어져서 나오면)
            npm install @react-native-async-storage/async-storage
            해주고 다시 import 해보면 될것임 (https://react-native-async-storage.github.io/async-storage/docs/install/)
            나는 설치해줘도 없는걸로 뜬다... Expo에서 되긴 되는데...

        store와 관련된 문제가 하나 있는데, store도 persist 되어야 한다.

        persistReducer는 reducer를 저장하고, persistStore는 store를 저장한다
        그러니 persistedStore를 만들어보자

    (redux/store.js)
        import { configureStore } from "@reduxjs/toolkit";
        import { persistStore, persistReducer } from "redux-persist";
        import rootReducer from "./rootReducer";
        import { AsyncStorage } from "react-native";

        const persistConfig = {
            key: "root",                        
            storage: AsyncStorage
        }

        const persistedReducer = persistReducer(persistConfig, rootReducer);

        const store = configureStore({
            reducer: persistedReducer
        });

        const persistedStore = persistStore(store);

        export default store;

    여기까지 하고 저장해보면, A non-seriaizable value was ~ 하고 오류가 뜨는데,
    Redux tooklik이 Redux Persist가 가진 action들과 문제가 생긴 것이라 함

    (redux/store.js)
        import { configureStore, getDefaultMiddleware } from "@reduxjs/toolkit";
        import { persistStore, persistReducer } from "redux-persist";
        import rootReducer from "./rootReducer";
        import { AsyncStorage } from "react-native";
        import { FLUSH, PAUSE, PERSIST, PURGE, REGISTER, REHYDRATE } from "redux-persist/es/constants";

        const persistConfig = {
            key: "root",                        
            storage: AsyncStorage
        };

        const persistedReducer = persistReducer(persistConfig, rootReducer);

        const store = configureStore({
            reducer: persistedReducer,
            middleware: getDefaultMiddleware({
                serializableCheck:{
                    ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]
                }
            })
        });

        const persistedStore = persistStore(store);

        export default store;

    Redux toolkit이 action을 만드는 방법을 가지고 있는데, Redux Persist는 다른 종류의 action을 가지고 있다.
    따라서 이 둘이 잘 작동되도록 Redux toolkit에게 Redux Persist의 모든 action 들을 irgnore 하라고 한것임
    (Redux toolkit은 Redux Persist의 action들이 이상하다고 생각하기 떄문)


# 7.3 redux-persist part Two
    PersistGate: 화면 rendering을 위해 state를 load 할 때까지 기다려주는 component임
                핸드폰에 저장되어 있는 state를 load할 것이다.

    (redux/store.js) 에 있던 persistedStore 의 이름을 persistor로 바꿔주고 App.js에서 이용
        import { configureStore, getDefaultMiddleware } from "@reduxjs/toolkit";
        import { persistStore, persistReducer } from "redux-persist";
        import rootReducer from "./rootReducer";
        import { AsyncStorage } from "react-native";
        import { FLUSH, PAUSE, PERSIST, PURGE, REGISTER, REHYDRATE } from "redux-persist/es/constants";

        const persistConfig = {
            key: "root",                        
            storage: AsyncStorage
        };

        const persistedReducer = persistReducer(persistConfig, rootReducer);

        const store = configureStore({
            reducer: persistedReducer,
            middleware: getDefaultMiddleware({
                serializableCheck:{
                    ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER]
                }
            })
        });

        export const persistor = persistStore(store);

        export default store;

    (App.js)
        import React, { useState } from 'react';
        import { Asset } from 'expo-asset';
        import * as Font from 'expo-font';
        import AppLoading from 'expo-app-loading';
        import { Ionicons } from '@expo/vector-icons';
        import { Image } from 'react-native';
        import { Provider } from "react-redux";
        import { PersistGate } from 'redux-persist/integration/react';
        import Gate from "./components/Gate";
        import store, { persistor } from "./redux/store";

        const cacheImages = images => images.map(image =>{
        if(typeof image === "string"){
            return Image.prefetch(image);
        } else {                          
            return Asset.fromModule(image).downloadAsync();
        }
        });

        const cacheFonts = fonts => fonts.map(font => Font.loadAsync(font))

        export default function App() {
        const [isReady, setIsReady] = useState(false);
        const handleFinish = () => setIsReady(true);
        const loadAssets = async () => {
            const images = [
            require("./assets/loginBg.jpg"),
        "https://www.google.com/url?sa=i&url=https%3A%2F%2Febenezersuites.com%2Fhome%2Fairbnb-logo%2F&psig=AOvVaw1nvmxtozHJBe-U0j7iYZey&ust=1626415945104000&source=images&cd=vfe&ved=0CAoQjRxqFwoTCND24de15PECFQAAAAAdAAAAABAI"
        ];
        const fonts = [Ionicons.font]
        const imagePromises = cacheImages(images);
        const fontPromises = cacheFonts(fonts);
        return Promise.all([...fontPromises, ...imagePromises])
        }
        return isReady ? (
            <Provider store={store}>                    # isLoggedIn === false
            <PersistGate persistor={persistor}>       # isLoggedIn === true (핸드폰에서 state를 load 한 후)
                <Gate />
            </PersistGate>
            </Provider>
        ) : (
            <AppLoading 
            onError={console.error} 
            onFinish={handleFinish} 
            startAsync={loadAssets} 
            />
        );
        }

    여기까지 해도 오류 없어야 함
    이렇게 하고, Log In이 띄어져있을 떄 save로 refreshing, Log Out 띄어져있을때 save로 refreshing 해서 화면 유지가 되면, persist가 되는 것임

    * React Native 에서 (프로처럼) Redux를 debug 하는 것을 보자
        expo documentation 사이트에서 (docs.expo.io) redux를 검색하면 https://docs.expo.io/workflow/debugging/#debugging-redux
        , React Native Debugger 를 다운받을 수 있는 링크가 나옴 (https://github.com/jhen0409/react-native-debugger/releases)
        beta는 오류가 많으니 beta 버전이 아닌것으로 설치해서 실행하자

        docs에서 보면, ctrl+t 로 실행을 해보면, Port가 입력되어져서 나옴 19001 -> confirm
        ** 강의에서는 19001이라고 했는데, 공식문서를 보면 19000 포트로 confirm 하라고 함.
            강의 말고 공식문서대로 19000 포트로 confirm 했더니 작동 됨
        처음에 열기 전에 떠있던 창은 닫아주자

        -> React Native Debugger가 state를 보여준다.


# 7.4 Recap!
    preloading
    (App.js)
    const loadAssets = Async () 에서 Async가 필요없다고 지웠음
    <AppLoading startAsync={loadAssets}에 loadAssets에 await를 붙임
        -> <AppLoading startAsync={await loadAssets}
            왜냐면 많은 promise 들을 return 하니까 모든 promise 들이 load 될 때까지 기다려야 한다.
        라고 하고서는 또 지움...

    (redux/store.js)
        const persistConfg = {
            key: "root",
            storage: AsyncStorage
        }
    에서
    key는 어떻게 state를 핸드폰에 저장하고 싶은지 알려주는 것임
    storage는 저장하기 위해 어떤 걸 사용하고 싶은지에 관한 것이다. 우리는 (React-Native의) AsyncStorage를 이용
        AsyncStorage는 다음과 같이 사용 가능
        AsyncStorage.getItem("root")
        그러면 저장한 모든 state를 찾을 수 있다.


# 8.0 Auth Navigation part One
    
    React navigation을 이용하자
    https://reactnavigation.org/docs/getting-started
        $ npm install @react-navigation/stack
        ($ npm install @react-navigation/native)
        $ expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view
            https://dog-developers.tistory.com/183 보안 오류 해결 후
                1. windows PowerShell 프로그램을 관리자 권한으로 실행합니다.
                2. Get-ExecutionPolicy 명령어를 작성하면 본인의 권한? 상태가 보여집니다.
                3. 권한이 RemoteSigned 가 아니라면 Set-ExecutionPolicy RemoteSigned 를 입력
                4. Get-ExecutionPolicy 명령어로 다시 한번 확인 하면 RemoteSigned로 변경 확인.
            Error: spawn yarnpkg ENOENT 뜨면
                1. npm install --global yarn
                2. expo update 후 다시 실행해주면 되었음

    (navigation/Auth.js)
        import { createStackNavigator } from "@react-navigation/stack";

        const Auth = createStackNavigator();

        export default () => <Auth.Navigator>
                                                # navigator 안에는 screen이 와야 한다. 아직 없으니 screen을 만들자
        </Auth.Navigator>   

    (screens/Welcome.js), (screens/SignUp.js), (screen/SignIn.js) 생성
        import React from "react";
        import {View, Text} from "react-native";

        export default () => (
            <View style={{justifyContent: "center", alignItems: "center", flex: 1}}>
                <Text>Welcome</Text>        # 각각 Sign Up, Sign In으로 3개의 screen 생성 
            </View>
        );

    (navigation/Auth.js)
        import React from "react";
        import { createStackNavigator } from "@react-navigation/stack";
        import Welcome from "../screens/Welcome";
        import SignIn from "../screens/SignIn";
        import SignUp from "../screens/SignUp";

        const Auth = createStackNavigator();

        export default () => (
            <Auth.Navigator>
                <Auth.Screen name="Welcome" component={Welcome} />
                <Auth.Screen name="SignIn" component={SignIn} />
                <Auth.Screen name="SignUp" component={SignUp} />
            </Auth.Navigator>
        );  

    이제 Gate.js에서 render 해주자
    (components/Gate.js)
        import React from "react";
        import { View, Text, TouchableOpacity } from "react-native";
        import { useDispatch, useSelector } from "react-redux";
        import { logIn, logOut } from "../redux/usersSlice";


        export default () => {
            const { isLoggedIn } = useSelector(state => state.usersReducer);
            const dispatch = useDispatch();
            return (
                <NavigationContainer>   # Navigator를 render 하고 싶으면 NavigationContainer로 감싸주어야 한다.(아니면 오류)
                <View style={{justifyContent: "center", alignItems: "center", flex: 1}}> # 이 부분은 이제 필요 없음 삭제
                    {isLoggedIn? (
                        <TouchableOpacity onPress={() => dispatch(logOut())}>
                            <Text>Log Out</Text>
                        </TouchableOpacity>
                        ) : (
                        <Auth /># user가 로그아웃 하면 보여주는 이부분에 Auth를 render할 것이다.
                        )}
                </View> # 삭제
                </NavigationContainer>
            );
        };

    (components/Gate.js)
        import React from "react";
        import { View, Text, TouchableOpacity } from "react-native";
        import { useDispatch, useSelector } from "react-redux";
        import { logIn, logOut } from "../redux/usersSlice";
        import Auth from "../navigation/Auth";
        import { NavigationContainer } from "@react-navigation/native";


        export default () => {
            const { isLoggedIn } = useSelector(state => state.usersReducer);
            const dispatch = useDispatch();
            return (
                <NavigationContainer>   
                    {isLoggedIn? (
                        <TouchableOpacity onPress={() => dispatch(logOut())}>
                            <Text>Log Out</Text>
                        </TouchableOpacity>
                        ) : (
                        <Auth />
                        )}
                </NavigationContainer>
            );
        };


# 8.1 Auth Navigation part Two
    screen들이 기본값으로 특별한 props를 가지고 있다. 아래와 같이 확인해보자
    (screens/Welcome.js)
        import React from "react";
        import {View, Text} from "react-native";

        export default (props) => {
            console.log(props);
            return(
                <View style={{justifyContent: "center", alignItems: "center", flex: 1}}>
                    <Text>Welcome~!</Text>
                </View>
            );
        };

    위와 같이 하면 자동적으로 갖고있는 props들이 console.log로 출력된 것을 볼 수 있다.
    출력된 것중 우리는 navigate를 사용할 것이다.

    (screens/Welcome.js)
        import React from "react";
        import {View, Text, Button} from "react-native";

        export default ({ navigation }) => {
            return(
                <View style={{justifyContent: "center", alignItems: "center", flex: 1}}>
                    <Text>Welcome~!</Text>
                    <Button onPress={() => navigation.navigate("SignUp")} title={"Sign Up"}></Button>
                    <Button onPress={() => navigation.navigate("SignIn")} title={"Sign In"}></Button>
                </View>
            );
        };

    (navigation/Auth.js)
        import React from "react";
        import { Platform, View } from "react-native";
        import { createStackNavigator } from "@react-navigation/stack";
        import { Ionicons } from "@expo/vector-icons";
        import Welcome from "../screens/Welcome";
        import SignIn from "../screens/SignIn";
        import SignUp from "../screens/SignUp";

        const Auth = createStackNavigator();

        const isAndroid = Platform.Os === "android"

        export default () => (
            <Auth.Navigator mode="modal" headerMode="float" screenOptions={{
                headerBackTitleVisible: false,
                headerTransparent: true,
                headerBackImage: () => ( 
                    <View style={{paddingLeft: 10}}>
                        <Ionicons 
                            name={isAndroid ? "md-arrow-down": "ios-arrow-down"}    # expo.github.io/vector-icons/ 에서 아이콘 선택 가능
                            size={28} 
                        />
                    </View>
                )
            }}>
                <Auth.Screen name="Welcome" component={Welcome} />
                <Auth.Screen name="SignIn" component={SignIn} />
                <Auth.Screen name="SignUp" component={SignUp} />
            </Auth.Navigator>
        );    


# 8.2 Welcome Screen part One
    $ npm install styled-components
        styled-components는 React Native에서 CSS 작업을 할 수 있게 해준다.

    우선 component를 옮겨보자
    (components/Auth/BackBtn.js)
        import React from "react";
        import { Platform } from "react-native";
        import styled from "styled-components/native";
        import { Ionicons } from "@expo/vector-icons";

        const isAndroid = Platform.OS ==="android";

        const Container = styled.View``     # 이게 styled-components이고, ``안에 style 적용해주면 되는 듯

        export default () => <Container><Ionicons 
        name={isAndroid ? "md-arrow-back-circle": "md-arrow-back"}
        size={28} 
        /></Container>

    (navigation/Auth.js)
        import React from "react";
        import { createStackNavigator } from "@react-navigation/stack";
        import Welcome from "../screens/Welcome";
        import SignIn from "../screens/SignIn";
        import SignUp from "../screens/SignUp";
        import BackBtn from "../components/Auth/BackBtn";

        const Auth = createStackNavigator();

        const isAndroid = true;

        export default () => (
            <Auth.Navigator mode="modal" headerMode="float" screenOptions={{
                headerBackTitleVisible: false,
                headerTransparent: true,
                headerBackImage: () => <BackBtn />
            }}>
                <Auth.Screen name="Welcome" component={Welcome} />
                <Auth.Screen name="SignIn" component={SignIn} />
                <Auth.Screen name="SignUp" component={SignUp} />
            </Auth.Navigator>
        );  

    (screens/Welcome.js)
        import React from "react";
        import { StatusBar } from "react-native";
        import styled from "styled-components/native";

        const LOGO_URL = "https://blog.kakaocdn.net/dn/95jT7/btqQCAwEbDf/m30lmOx9xg7fKaPzQsFfJ1/img.jpg"

        const Container = styled.View``;

        const Image = styled.Image``;

        const Logo = styled.Image` # React-native는 외부에서 url로 이미지를 가져올때, 높이, 가로 길이를 설정해주어야 화면에나타난다.
            width: 100px;           
            height: 100px;
        `;

        export default ({ navigation }) => {
            return(
                <Container>
                    <Logo source={{uri:LOGO_URL}} /> # React-native는 외부에서 url로 이미지를 가져올때, 높이, 가로 길이를 설정해주어야 화면에나타난다.
                    <Image source={require("../assets/loginBg.jpg")} />
                    <StatusBar barStyle="light-content" />
                </Container>
            );
        };

    조금 더 디자인 해보자
    $ expo install expo-blur

    (screens/Welcome.js)
        import React from "react";
        import { StatusBar } from "react-native";
        import styled from "styled-components/native";
        import { BlurView } from 'expo-blur';

        const LOGO_URL = "https://blog.kakaocdn.net/dn/95jT7/btqQCAwEbDf/m30lmOx9xg7fKaPzQsFfJ1/img.jpg"

        const Container = styled.View`
            flex: 1;
        `;

        const Image = styled.Image`
            position: absolute;
            z-index:-1;
            top: 0;
        `;

        const Logo = styled.Image` 
            width: 100px;           
            height: 100px;
        `;

        export default ({ navigation }) => {
            return(
                <Container>
                    <BlurView
                        intensity={10}
                        tint="light"
                        style={{
                            flex: 1,
                            width: "100%",
                            alignItems: "center",
                            justifyContent: "center"
                        }}>
                        <Logo source={{uri:LOGO_URL}} />
                    </BlurView>
                    <Image source={require("../assets/loginBg.jpg")} />
                    <StatusBar barStyle="light-content" />
                </Container>
            );
        };